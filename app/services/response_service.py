# app/services/response_service.py - Response generation and handling functions

from datetime import datetime
import google.generativeai as genai
from app.utils.text_utils import sanitize_text_for_json, build_conversation_context
from app.utils.format_utils import format_distance_friendly
from app.services.search_service import classify_query_with_context, build_nearby_gym_query, get_nearby_distance_preference
from app.services.pt_search_service import classify_trainer_query, build_nearby_trainer_query, get_trainer_distance_preference
from app.services.pt_recommendation_service import create_trainer_response
from app.database.connection import query_database
from app.models.gym_models import safe_get_row_data
from app.models.trainer_models import safe_get_trainer_data
from config import GEMINI_API_KEY

# C·∫•u h√¨nh Gemini API
genai.configure(api_key=GEMINI_API_KEY)

# Kh·ªüi t·∫°o m√¥ h√¨nh Gemini
model = genai.GenerativeModel("gemini-2.0-flash")

def create_simple_response(gyms, user_input, is_nearby=False):
    """T·∫°o ph·∫£n h·ªìi ƒë∆°n gi·∫£n cho k·∫øt qu·∫£ t√¨m ki·∫øm gym"""
    if not gyms:
        return "Kh√¥ng t√¨m th·∫•y gym n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ c·ªßa b·∫°n."

    if len(gyms) == 1:
        gym = gyms[0]
        response = f"**{gym['gymName']}**"
        if gym.get('distance_km'):
            response += f" - {format_distance_friendly(gym['distance_km'])}"
        if gym['address']:
            response += f"\nƒê·ªãa ch·ªâ: {gym['address']}"
        if gym['hotResearch']:
            response += "\nƒê√¢y l√† ph√≤ng gym r·∫•t ƒë∆∞·ª£c y√™u th√≠ch!"
        return response
    
    elif len(gyms) <= 3:
        response = f"**T√¨m th·∫•y {len(gyms)} ph√≤ng gym:**\n"
        for i, gym in enumerate(gyms, 1):
            name = gym['gymName']
            if gym['hotResearch']:
                name += " (Hot)"
            if gym.get('distance_km'):
                name += f" ({format_distance_friendly(gym['distance_km'])})"
            response += f"{i}. **{name}**\n"
        return response
    
    else:
        hot_gyms = [g for g in gyms if g['hotResearch']]
        response = f"**T√¨m th·∫•y {len(gyms)} ph√≤ng gym!**\n"

        if hot_gyms:
            response += "**C√°c ph√≤ng gym ph·ªï bi·∫øn:**\n"
            for i, gym in enumerate(hot_gyms, 1):
                name = gym['gymName']
                if gym.get('distance_km'):
                    name += f" ({format_distance_friendly(gym['distance_km'])})"
                response += f"{i}. **{name}**\n"
                
            # Hi·ªÉn th·ªã c√°c gym c√≤n l·∫°i
            other_gyms = [g for g in gyms if not g['hotResearch']]
            if other_gyms:
                response += "\n**C√°c ph√≤ng gym kh√°c:**\n"
                for i, gym in enumerate(other_gyms, len(hot_gyms) + 1):
                    name = gym['gymName']
                    if gym.get('distance_km'):
                        name += f" ({format_distance_friendly(gym['distance_km'])})"
                    response += f"{i}. **{name}**\n"
        else:
            response += "**T·∫•t c·∫£ ph√≤ng gym:**\n"
            for i, gym in enumerate(gyms, 1):
                name = gym['gymName']
                if gym.get('distance_km'):
                    name += f" ({format_distance_friendly(gym['distance_km'])})"
                response += f"{i}. **{name}**\n"
        
        return response

def get_response_with_history(user_input, conversation_history=None, longitude=None, latitude=None):
    """H√†m ch√≠nh ƒë·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa ng∆∞·ªùi d√πng v·ªõi l·ªãch s·ª≠ h·ªôi tho·∫°i"""
    try:
        if conversation_history is None:
            conversation_history = []
        
        conversation_context = build_conversation_context(conversation_history)
        
        # Th√™m tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng v√†o l·ªãch s·ª≠
        current_conversation = conversation_history.copy()
        current_conversation.append({
            "role": "user",
            "content": sanitize_text_for_json(user_input),
            "timestamp": datetime.now().isoformat()
        })
        
        # PRIORITY 1: X·ª≠ l√Ω t√¨m ki·∫øm Personal Trainer
        is_trainer_query, trainer_sql = classify_trainer_query(user_input, longitude, latitude)

        if is_trainer_query:
            print(f"üèãÔ∏è TRAINER_SEARCH: Detected trainer search request")

            # X·ª≠ l√Ω t√¨m ki·∫øm PT g·∫ßn v·ªõi t·ªça ƒë·ªô
            if longitude and latitude and any(keyword in user_input.lower() for keyword in ["g·∫ßn", "near", "nearby", "xung quanh", "l√¢n c·∫≠n"]):
                max_distance = get_trainer_distance_preference(user_input)
                print(f"üéØ TRAINER SMART RADIUS: B√°n k√≠nh ƒë∆∞·ª£c ch·ªçn: {max_distance}km")
                trainer_sql = build_nearby_trainer_query(longitude, latitude, max_distance)

            results = query_database(trainer_sql)

            if isinstance(results, str) or not results:
                response_text = "Kh√¥ng t√¨m th·∫•y hu·∫•n luy·ªán vi√™n n√†o ph√π h·ª£p v·ªõi y√™u c·∫ßu c·ªßa b·∫°n. H√£y th·ª≠ m·ªü r·ªông ti√™u ch√≠ t√¨m ki·∫øm!"
                current_conversation.append({
                    "role": "assistant",
                    "content": sanitize_text_for_json(response_text),
                    "timestamp": datetime.now().isoformat()
                })
                return {
                    "promptResponse": sanitize_text_for_json(response_text),
                    "conversation_history": current_conversation
                }

            trainers = [safe_get_trainer_data(row) for row in results]
            print(f"üéØ TRAINER_RESULT: T√¨m th·∫•y {len(trainers)} hu·∫•n luy·ªán vi√™n")

            is_nearby = longitude and latitude and any(kw in user_input.lower() for kw in ["g·∫ßn", "near", "nearby"])
            prompt_response = create_trainer_response(trainers, user_input, is_nearby)

            current_conversation.append({
                "role": "assistant",
                "content": sanitize_text_for_json(prompt_response),
                "timestamp": datetime.now().isoformat()
            })
            return {
                "trainers": trainers,
                "promptResponse": sanitize_text_for_json(prompt_response),
                "conversation_history": current_conversation
            }

        # PRIORITY 2: X·ª≠ l√Ω t√¨m ki·∫øm gym g·∫ßn v·ªõi t·ªça ƒë·ªô
        if longitude and latitude and any(keyword in user_input.lower() for keyword in ["g·∫ßn", "near", "nearby", "xung quanh", "l√¢n c·∫≠n", "g·∫ßn ƒë√¢y", "quanh ƒë√¢y"]):
            max_distance = get_nearby_distance_preference(user_input)
            print(f"üéØ SMART RADIUS: User input '{user_input}' ‚Üí B√°n k√≠nh ƒë∆∞·ª£c ch·ªçn: {max_distance}km")
            
            sql_query = build_nearby_gym_query(longitude, latitude, max_distance)
            results = query_database(sql_query)

            if isinstance(results, str) or not results:
                response_text = f"Kh√¥ng t√¨m th·∫•y gym n√†o trong b√°n k√≠nh {max_distance}km. H√£y th·ª≠ m·ªü r·ªông khu v·ª±c t√¨m ki·∫øm!"
                current_conversation.append({
                    "role": "assistant",
                    "content": sanitize_text_for_json(response_text),
                    "timestamp": datetime.now().isoformat()
                })
                return {
                    "promptResponse": sanitize_text_for_json(response_text),
                    "conversation_history": current_conversation
                }

            gyms = [safe_get_row_data(row) for row in results]
            print(f"üîç DEBUG: T√¨m th·∫•y {len(gyms)} gym trong b√°n k√≠nh {max_distance}km")
            for i, gym in enumerate(gyms):
                print(f"  {i+1}. {gym['gymName']} - {gym.get('distance_km', 'N/A')}km")
            
            prompt_response = create_simple_response(gyms, user_input, is_nearby=True)

            current_conversation.append({
                "role": "assistant",
                "content": sanitize_text_for_json(prompt_response),
                "timestamp": datetime.now().isoformat()
            })
            return {
                "gyms": gyms, 
                "promptResponse": sanitize_text_for_json(prompt_response),
                "conversation_history": current_conversation
            }
        
        # PRIORITY 3: Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu th√¥ng th∆∞·ªùng (gym search)
        is_db_query, sql_query = classify_query_with_context(user_input, conversation_context)
        print(f"üîç QUERY_CLASSIFICATION: is_db_query={is_db_query}, user_input='{user_input}'")
        
        if is_db_query:
            results = query_database(sql_query)
            if isinstance(results, str) or not results:
                response_text = "Kh√¥ng t√¨m th·∫•y gym n√†o ph√π h·ª£p v·ªõi ti√™u ch√≠ c·ªßa b·∫°n. H√£y th·ª≠ t√¨m ki·∫øm kh√°c!"
                current_conversation.append({
                    "role": "assistant",
                    "content": sanitize_text_for_json(response_text),
                    "timestamp": datetime.now().isoformat()
                })
                return {
                    "promptResponse": sanitize_text_for_json(response_text),
                    "conversation_history": current_conversation
                }

            gyms = [safe_get_row_data(row) for row in results]
            print(f"üéØ SEARCH_RESULT: T√¨m th·∫•y {len(gyms)} gym t·ª´ database")
            
            prompt_response = create_simple_response(gyms, user_input)

            current_conversation.append({
                "role": "assistant",
                "content": sanitize_text_for_json(prompt_response),
                "timestamp": datetime.now().isoformat()
            })
            return {
                "gyms": gyms, 
                "promptResponse": sanitize_text_for_json(prompt_response),
                "conversation_history": current_conversation
            }

        # PRIORITY 4: H·ªôi tho·∫°i t·ª± do v·ªõi Gemini
        enhanced_context = f"""
        B·∫°n l√† FitBridge AI - tr·ª£ l√Ω t√¨m ki·∫øm ph√≤ng gym v√† hu·∫•n luy·ªán vi√™n c√° nh√¢n th√¢n thi·ªán v√† chuy√™n nghi·ªáp t·∫°i Vi·ªát Nam.
        
        Kh·∫£ nƒÉng:
        - ƒê∆∞a ra g·ª£i √Ω ph√≤ng gym, hu·∫•n luy·ªán vi√™n c√° nh√¢n (PT) v√† th√¥ng tin chi ti·∫øt
        - T∆∞ v·∫•n th·ªÉ d·ª•c v√† l·ªãch t·∫≠p luy·ªán d·ª±a tr√™n m·ª•c ti√™u
        - Chia s·∫ª ki·∫øn th·ª©c v·ªÅ s·ª©c kh·ªèe v√† th·ªÉ h√¨nh
        - Nh·ªõ ng·ªØ c·∫£nh h·ªôi tho·∫°i ƒë·ªÉ t∆∞ v·∫•n nh·∫•t qu√°n
        - Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ gym, PT, th·ªÉ d·ª•c, s·ª©c kh·ªèe
        
        V√≠ d·ª•: N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ 1 ch·ªß ƒë·ªÅ b·∫•t k·ª≥ kh√¥ng li√™n quan ƒë·∫øn gym, PT, th·ªÉ d·ª•c, s·ª©c kh·ªèe, 
        b·∫°n h√£y tr·∫£ l·ªùi r·∫±ng: "Xin l·ªói, t√¥i ch·ªâ c√≥ th·ªÉ h·ªó tr·ª£ c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn gym, hu·∫•n luy·ªán vi√™n c√° nh√¢n, th·ªÉ d·ª•c. Nh·ªØng lƒ©nh v·ª±c kh√°c kh√¥ng n·∫±m trong chuy√™n m√¥n c·ªßa t√¥i."
        
        Phong c√°ch: Th√¢n thi·ªán, chuy√™n nghi·ªáp, hi·ªÉu bi·∫øt. Kh√¥ng s·ª≠ d·ª•ng emoji.
        Lu√¥n k·∫øt th√∫c b·∫±ng c√¢u h·ªèi ho·∫∑c g·ª£i √Ω h√†nh ƒë·ªông.
        
        L·ªãch s·ª≠ h·ªôi tho·∫°i:
        {conversation_context}
        """
        
        prompt = f"{enhanced_context}\n\nC√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng: {user_input}"
        response = model.generate_content(prompt)
        
        current_conversation.append({
            "role": "assistant", 
            "content": sanitize_text_for_json(response.text),
            "timestamp": datetime.now().isoformat()
        })
        
        return {
            "promptResponse": sanitize_text_for_json(response.text),
            "conversation_history": current_conversation
        }

    except Exception as e:
        print(f"L·ªói trong get_response_with_history: {str(e)}")
        error_response = "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i!"

        if 'current_conversation' in locals():
            current_conversation.append({
                "role": "assistant", 
                "content": sanitize_text_for_json(error_response),
                "timestamp": datetime.now().isoformat()
            })
            return {
                "promptResponse": sanitize_text_for_json(error_response),
                "conversation_history": current_conversation
            }
        
        return {"promptResponse": sanitize_text_for_json(error_response)}