# app/services/pt_search_service.py - Personal Trainer search logic and query building

import math
import re
from app.utils.text_utils import normalize_vietnamese_text
from app.database.connection import query_database


def build_nearby_trainer_query(longitude, latitude, max_distance_km=10, user_input=""):
    """
    X√¢y d·ª±ng truy v·∫•n SQL ƒë·ªÉ t√¨m Personal Trainer g·∫ßn ng∆∞·ªùi d√πng
    Bao g·ªìm c·∫£ PT gym v√† PT freelance, mixed v√† gi·ªõi h·∫°n 10 k·∫øt qu·∫£
    """
    lat_range = max_distance_km / 111.0
    lng_range = max_distance_km / (111.0 * abs(math.cos(math.radians(latitude))))

    # Extract experience requirement n·∫øu c√≥
    exp_operator, exp_years = extract_experience_requirement(user_input)
    experience_filter = ""
    if exp_operator and exp_years:
        experience_filter = f"\n        HAVING ud.\"Experience\" {exp_operator} {exp_years}"
        print(f"üéØ EXPERIENCE_FILTER (nearby): L·ªçc PT c√≥ kinh nghi·ªám {exp_operator} {exp_years} nƒÉm")

    return f"""
    WITH NearbyGyms AS (
        -- T√¨m c√°c gym g·∫ßn ng∆∞·ªùi d√πng
        SELECT 
            gym."Id" as gym_id,
            gym."GymName" as gymname,
            COALESCE(
                CONCAT_WS(', ', 
                    NULLIF(a."HouseNumber", ''), 
                    NULLIF(a."Street", ''), 
                    NULLIF(a."Ward", ''), 
                    NULLIF(a."District", ''), 
                    NULLIF(a."City", '')
                ), 
                'ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t'
            ) as gymaddress,
            CAST(gym."Longitude" AS DOUBLE PRECISION) AS gym_longitude,
            CAST(gym."Latitude" AS DOUBLE PRECISION) AS gym_latitude,
            gym."hotResearch" as gym_hotresearch,
            6371.0 * 2 * ASIN(
                SQRT(
                    POWER(SIN(RADIANS({latitude} - CAST(gym."Latitude" AS DOUBLE PRECISION)) / 2), 2) +
                    COS(RADIANS({latitude})) * COS(RADIANS(CAST(gym."Latitude" AS DOUBLE PRECISION))) *
                    POWER(SIN(RADIANS({longitude} - CAST(gym."Longitude" AS DOUBLE PRECISION)) / 2), 2)
                )
            ) AS distance_km
        FROM "AspNetUsers" gym
        LEFT JOIN "Addresses" a ON gym."Id" = a."CustomerId" AND a."IsEnabled" = true
        WHERE gym."AccountStatus" = 'Active'
            AND gym."GymName" IS NOT NULL 
            AND gym."GymName" != ''
            AND gym."Latitude" IS NOT NULL 
            AND gym."Longitude" IS NOT NULL
            AND CAST(gym."Latitude" AS DOUBLE PRECISION) BETWEEN {latitude - lat_range} AND {latitude + lat_range}
            AND CAST(gym."Longitude" AS DOUBLE PRECISION) BETWEEN {longitude - lng_range} AND {longitude + lng_range}
    ),
    RankedGyms AS (
        SELECT *
        FROM NearbyGyms
        WHERE distance_km <= {max_distance_km}
    ),
    TrainersWithGoals AS (
        -- L·∫•y t·∫•t c·∫£ PT (gym v√† freelance) v√† th√¥ng tin m·ª•c ti√™u t·∫≠p luy·ªán
        SELECT 
            pt."Id" as id,
            pt."FullName" as fullname,
            pt."Email" as email,
            pt."PhoneNumber" as phonenumber,
            pt."IsMale" as ismale,
            pt."Dob" as dob,
            pt."AvatarUrl" as avatarurl,
            pt."Bio" as bio,
            pt."AccountStatus" as accountstatus,
            pt."CreatedAt" as createdat,
            pt."UpdatedAt" as updatedat,
            pt."GymOwnerId" as pt_gym_id,
            pt."Latitude" as pt_latitude,
            pt."Longitude" as pt_longitude,
            ud."Experience" as experience,
            ud."Certificates" as certificates,
            ud."Height" as height,
            ud."Weight" as weight,
            ud."Biceps" as biceps,
            ud."Chest" as chest,
            ud."Waist" as waist,
            ARRAY_AGG(DISTINCT gt."Name") FILTER (WHERE gt."Name" IS NOT NULL) as goal_trainings,
            -- Ki·ªÉm tra xem c√≥ package freelance kh√¥ng
            CASE 
                WHEN COUNT(DISTINCT pfp."Id") > 0 THEN true 
                ELSE false 
            END as is_freelance
        FROM "AspNetUsers" pt
        LEFT JOIN "UserDetails" ud ON pt."Id" = ud."Id"
        LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
        LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
        LEFT JOIN "PTFreelancePackages" pfp ON pt."Id" = pfp."PtId" AND pfp."IsEnabled" = true
        WHERE pt."AccountStatus" = 'Active'
            AND (pt."GymOwnerId" IS NOT NULL OR EXISTS (
                SELECT 1 FROM "PTFreelancePackages" pfp2 
                WHERE pfp2."PtId" = pt."Id" AND pfp2."IsEnabled" = true
            ))
        GROUP BY pt."Id", ud."Experience", ud."Certificates", ud."Height", 
                 ud."Weight", ud."Biceps", ud."Chest", ud."Waist"{experience_filter}
    ),
    -- PT Gym v·ªõi kho·∫£ng c√°ch t·ª´ gym
    GymPTs AS (
        SELECT 
            t.id,
            t.fullname,
            t.email,
            t.phonenumber,
            t.ismale,
            t.dob,
            t.avatarurl,
            t.bio,
            t.accountstatus,
            t.createdat,
            t.updatedat,
            t.pt_gym_id,
            t.experience,
            t.certificates,
            t.height,
            t.weight,
            t.biceps,
            t.chest,
            t.waist,
            t.goal_trainings,
            t.is_freelance,
            g.gym_id,
            g.gymname,
            g.gymaddress,
            g.gym_latitude,
            g.gym_longitude,
            g.gym_hotresearch,
            g.distance_km,
            'gym' as pt_type,
            ROW_NUMBER() OVER (ORDER BY g.distance_km ASC, g.gym_hotresearch DESC, t.experience DESC NULLS LAST) as rn
        FROM TrainersWithGoals t
        INNER JOIN RankedGyms g ON t.pt_gym_id = g.gym_id
    ),
    -- PT Freelance v·ªõi kho·∫£ng c√°ch t·ª´ v·ªã tr√≠ c√° nh√¢n
    FreelancePTs AS (
        SELECT 
            t.id,
            t.fullname,
            t.email,
            t.phonenumber,
            t.ismale,
            t.dob,
            t.avatarurl,
            t.bio,
            t.accountstatus,
            t.createdat,
            t.updatedat,
            t.pt_gym_id,
            t.experience,
            t.certificates,
            t.height,
            t.weight,
            t.biceps,
            t.chest,
            t.waist,
            t.goal_trainings,
            t.is_freelance,
            NULL::UUID as gym_id,
            'Hu·∫•n luy·ªán vi√™n t·ª± do' as gymname,
            'T·∫≠p t·∫°i ƒë·ªãa ƒëi·ªÉm linh ho·∫°t' as gymaddress,
            CAST(t.pt_latitude AS DOUBLE PRECISION) as gym_latitude,
            CAST(t.pt_longitude AS DOUBLE PRECISION) as gym_longitude,
            false as gym_hotresearch,
            CASE 
                WHEN t.pt_latitude IS NOT NULL AND t.pt_longitude IS NOT NULL THEN
                    6371.0 * 2 * ASIN(
                        SQRT(
                            POWER(SIN(RADIANS({latitude} - CAST(t.pt_latitude AS DOUBLE PRECISION)) / 2), 2) +
                            COS(RADIANS({latitude})) * COS(RADIANS(CAST(t.pt_latitude AS DOUBLE PRECISION))) *
                            POWER(SIN(RADIANS({longitude} - CAST(t.pt_longitude AS DOUBLE PRECISION)) / 2), 2)
                        )
                    )
                ELSE NULL
            END as distance_km,
            'freelance' as pt_type,
            ROW_NUMBER() OVER (ORDER BY 
                CASE 
                    WHEN t.pt_latitude IS NOT NULL AND t.pt_longitude IS NOT NULL THEN
                        6371.0 * 2 * ASIN(
                            SQRT(
                                POWER(SIN(RADIANS({latitude} - CAST(t.pt_latitude AS DOUBLE PRECISION)) / 2), 2) +
                                COS(RADIANS({latitude})) * COS(RADIANS(CAST(t.pt_latitude AS DOUBLE PRECISION))) *
                                POWER(SIN(RADIANS({longitude} - CAST(t.pt_longitude AS DOUBLE PRECISION)) / 2), 2)
                            )
                        )
                    ELSE 999999
                END ASC,
                t.experience DESC NULLS LAST
            ) as rn
        FROM TrainersWithGoals t
        WHERE t.is_freelance = true
            AND t.pt_gym_id IS NULL
            AND (
                t.pt_latitude IS NULL OR t.pt_longitude IS NULL OR
                (CAST(t.pt_latitude AS DOUBLE PRECISION) BETWEEN {latitude - lat_range} AND {latitude + lat_range}
                AND CAST(t.pt_longitude AS DOUBLE PRECISION) BETWEEN {longitude - lng_range} AND {longitude + lng_range})
            )
    ),
    -- Mixed k·∫øt qu·∫£: xen k·∫Ω gym v√† freelance
    MixedResults AS (
        SELECT * FROM GymPTs WHERE rn <= 10
        UNION ALL
        SELECT * FROM FreelancePTs WHERE rn <= 10
    )
    -- L·∫•y 10 PT, ∆∞u ti√™n xen k·∫Ω gi·ªØa gym v√† freelance
    SELECT 
        id, fullname, email, phonenumber, ismale, dob, avatarurl, bio,
        accountstatus, createdat, updatedat, pt_gym_id as gym_id, experience, certificates,
        height, weight, biceps, chest, waist, goal_trainings, is_freelance,
        gymname, gymaddress, gym_latitude, gym_longitude, gym_hotresearch,
        distance_km, pt_type
    FROM (
        SELECT *,
            ROW_NUMBER() OVER (
                PARTITION BY (rn % 2)
                ORDER BY 
                    CASE WHEN pt_type = 'gym' THEN 0 ELSE 1 END,
                    distance_km ASC NULLS LAST,
                    experience DESC NULLS LAST
            ) as mixed_rn
        FROM MixedResults
        WHERE distance_km IS NULL OR distance_km <= {max_distance_km}
    ) mixed
    WHERE mixed_rn <= 5
    ORDER BY 
        (mixed_rn - 1) * 2 + CASE WHEN pt_type = 'gym' THEN 0 ELSE 1 END,
        distance_km ASC NULLS LAST
    LIMIT 10
    """


def extract_experience_requirement(user_input):
    """
    Tr√≠ch xu·∫•t y√™u c·∫ßu v·ªÅ kinh nghi·ªám t·ª´ input c·ªßa ng∆∞·ªùi d√πng
    Returns: tuple (operator, years) ho·∫∑c (None, None) n·∫øu kh√¥ng c√≥
    Operator: '>=', '>', '=', '<', '<='
    """
    user_input_lower = user_input.lower()

    # Pattern 1: "√≠t nh·∫•t X nƒÉm" ho·∫∑c "t·ªëi thi·ªÉu X nƒÉm"
    patterns_gte = [
        r'√≠t nh·∫•t\s+(\d+)\s*nƒÉm',
        r't·ªëi thi·ªÉu\s+(\d+)\s*nƒÉm',
        r't·ª´\s+(\d+)\s*nƒÉm',
        r'tr√™n\s+(\d+)\s*nƒÉm',
        r'at least\s+(\d+)\s*year',
        r'minimum\s+(\d+)\s*year',
    ]

    for pattern in patterns_gte:
        match = re.search(pattern, user_input_lower)
        if match:
            years = int(match.group(1))
            return ('>=', years)

    # Pattern 2: "nhi·ªÅu h∆°n X nƒÉm" ho·∫∑c "h∆°n X nƒÉm"
    patterns_gt = [
        r'nhi·ªÅu h∆°n\s+(\d+)\s*nƒÉm',
        r'h∆°n\s+(\d+)\s*nƒÉm',
        r'more than\s+(\d+)\s*year',
        r'over\s+(\d+)\s*year',
    ]

    for pattern in patterns_gt:
        match = re.search(pattern, user_input_lower)
        if match:
            years = int(match.group(1))
            return ('>', years)

    # Pattern 3: "d∆∞·ªõi X nƒÉm" ho·∫∑c "√≠t h∆°n X nƒÉm"
    patterns_lt = [
        r'd∆∞·ªõi\s+(\d+)\s*nƒÉm',
        r'√≠t h∆°n\s+(\d+)\s*nƒÉm',
        r'under\s+(\d+)\s*year',
        r'less than\s+(\d+)\s*year',
    ]

    for pattern in patterns_lt:
        match = re.search(pattern, user_input_lower)
        if match:
            years = int(match.group(1))
            return ('<', years)

    # Pattern 4: "c√≥ X nƒÉm kinh nghi·ªám" (exact match)
    patterns_eq = [
        r'c√≥\s+(\d+)\s*nƒÉm\s+kinh nghi·ªám',
        r'(\d+)\s*nƒÉm\s+kinh nghi·ªám',
        r'kinh nghi·ªám\s+(\d+)\s*nƒÉm',
        r'(\d+)\s*year[s]?\s+experience',
        r'experience[d]?\s+(\d+)\s*year',
    ]

    for pattern in patterns_eq:
        match = re.search(pattern, user_input_lower)
        if match:
            years = int(match.group(1))
            return ('=', years)  # Interpret "c√≥ X nƒÉm" as "√≠t nh·∫•t X nƒÉm"

    return (None, None)


def build_trainer_search_query(user_input, longitude=None, latitude=None):
    """
    X√¢y d·ª±ng truy v·∫•n t√¨m ki·∫øm PT th√¥ng minh d·ª±a tr√™n input c·ªßa ng∆∞·ªùi d√πng
    Bao g·ªìm c·∫£ PT gym v√† PT freelance
    """
    try:
        user_input_lower = user_input.lower()

        # Ph√¢n t√≠ch t·ª´ kh√≥a t√¨m ki·∫øm
        search_keywords = []
        goal_keywords = []

        # Mapping m·ª•c ti√™u t·∫≠p luy·ªán ph·ªï bi·∫øn
        goal_mapping = {
            'Gi·∫£m c√¢n': ['gi·∫£m c√¢n', 'lose weight', 'weight loss', 'fat loss', 'giam can'],
            'TƒÉng c∆°': ['tƒÉng c∆°', 'build muscle', 'muscle gain', 'bulk', 'tang co'],
            'Th·ªÉ h√¨nh': ['th·ªÉ h√¨nh', 'bodybuilding', 'physique', 'the hinh'],
            'S·ª©c m·∫°nh': ['s·ª©c m·∫°nh', 'strength', 'power', 'suc manh'],
            'S·ª©c b·ªÅn': ['s·ª©c b·ªÅn', 'endurance', 'stamina', 'cardio', 'suc ben'],
            'Linh ho·∫°t': ['linh ho·∫°t', 'flexibility', 'yoga', 'stretching', 'linh hoat'],
            'Ph·ª•c h·ªìi ch·ª©c nƒÉng': ['ph·ª•c h·ªìi', 'rehabilitation', 'recovery', 'injury', 'phuc hoi'],
            'Th·ªÉ l·ª±c t·ªïng h·ª£p': ['th·ªÉ l·ª±c', 'fitness', 'general fitness', 'the luc'],
        }

        # T√¨m m·ª•c ti√™u trong input
        for goal, keywords in goal_mapping.items():
            if any(kw in user_input_lower for kw in keywords):
                goal_keywords.append(goal)

        # Extract experience requirement
        exp_operator, exp_years = extract_experience_requirement(user_input)

        # Ki·ªÉm tra y√™u c·∫ßu ch·ªâ PT freelance ho·∫∑c ch·ªâ PT gym
        only_freelance = any(kw in user_input_lower for kw in ['t·ª± do', 'freelance', 'tu do', 'kh√¥ng gym', 'khong gym'])
        only_gym = any(kw in user_input_lower for kw in ['t·∫°i gym', 'tai gym', 'ph√≤ng gym', 'phong gym', 'gym pt'])

        print(f"üîç PT_TYPE_FILTER: only_freelance={only_freelance}, only_gym={only_gym}")

        # X√¢y d·ª±ng base conditions cho PT
        pt_base_conditions = [
            'pt."AccountStatus" = \'Active\'',
            # B·ªè ƒëi·ªÅu ki·ªán GymOwnerId ƒë·ªÉ bao g·ªìm c·∫£ freelance
            '(pt."GymOwnerId" IS NOT NULL OR EXISTS (SELECT 1 FROM "PTFreelancePackages" pfp WHERE pfp."PtId" = pt."Id" AND pfp."IsEnabled" = true))'
        ]

        # N·∫øu c√≥ t·ªça ƒë·ªô v√† y√™u c·∫ßu t√¨m g·∫ßn
        if longitude and latitude and any(kw in user_input_lower for kw in
            ['g·∫ßn', 'near', 'nearby', 'xung quanh', 'l√¢n c·∫≠n']):
            max_distance = get_trainer_distance_preference(user_input)
            return build_nearby_trainer_query(longitude, latitude, max_distance, user_input)

        # Th√™m filter theo goal trainings (JOIN tr·ª±c ti·∫øp v·ªõi GoalTrainings)
        goal_join_conditions = []
        if goal_keywords:
            goal_list = "', '".join([g.replace("'", "''") for g in goal_keywords])
            goal_join_conditions.append(f"gt.\"Name\" IN ('{goal_list}')")

        # Ki·ªÉm tra gender - ∆Øu ti√™n cao h∆°n, check tr∆∞·ªõc khi x·ª≠ l√Ω keywords
        if 'n·ªØ' in user_input_lower or 'female' in user_input_lower or 'nu' in normalize_vietnamese_text(user_input):
            pt_base_conditions.append('pt."IsMale" = false')
        elif 'nam' in user_input_lower or 'male' in user_input_lower:
            pt_base_conditions.append('pt."IsMale" = true')

        # Build WHERE clause
        where_parts = []
        where_parts.append(f"({' AND '.join(pt_base_conditions)})")

        if goal_join_conditions:
            where_parts.append(f"({' AND '.join(goal_join_conditions)})")

        where_clause = " AND ".join(where_parts)

        # Build experience filter cho TrainersWithGoals CTE
        experience_filter = ""
        if exp_operator and exp_years:
            experience_filter = f"\n            HAVING ud.\"Experience\" {exp_operator} {exp_years}"
            print(f"üéØ EXPERIENCE_FILTER: L·ªçc PT c√≥ kinh nghi·ªám {exp_operator} {exp_years} nƒÉm")

        # X√¢y d·ª±ng query kh√°c nhau t√πy theo lo·∫°i PT ƒë∆∞·ª£c y√™u c·∫ßu
        if only_freelance:
            # Ch·ªâ tr·∫£ v·ªÅ PT freelance
            print("üíº Ch·ªâ t√¨m PT FREELANCE")
            query = f"""
            WITH FilteredPTs AS (
                SELECT DISTINCT
                    pt."Id" as pt_id
                FROM "AspNetUsers" pt
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                WHERE {where_clause}
            ),
            TrainersWithGoals AS (
                SELECT 
                    pt."Id" as id,
                    pt."FullName" as fullname,
                    pt."Email" as email,
                    pt."PhoneNumber" as phonenumber,
                    pt."IsMale" as ismale,
                    pt."Dob" as dob,
                    pt."AvatarUrl" as avatarurl,
                    pt."Bio" as bio,
                    pt."AccountStatus" as accountstatus,
                    pt."CreatedAt" as createdat,
                    pt."UpdatedAt" as updatedat,
                    pt."GymOwnerId" as pt_gym_id,
                    ud."Experience" as experience,
                    ud."Certificates" as certificates,
                    ud."Height" as height,
                    ud."Weight" as weight,
                    ud."Biceps" as biceps,
                    ud."Chest" as chest,
                    ud."Waist" as waist,
                    ARRAY_AGG(DISTINCT gt."Name") FILTER (WHERE gt."Name" IS NOT NULL) as goal_trainings,
                    CASE 
                        WHEN COUNT(DISTINCT pfp."Id") > 0 THEN true 
                        ELSE false 
                    END as is_freelance
                FROM "AspNetUsers" pt
                INNER JOIN FilteredPTs fp ON pt."Id" = fp.pt_id
                LEFT JOIN "UserDetails" ud ON pt."Id" = ud."Id"
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                LEFT JOIN "PTFreelancePackages" pfp ON pt."Id" = pfp."PtId" AND pfp."IsEnabled" = true
                GROUP BY pt."Id", ud."Experience", ud."Certificates", ud."Height", 
                         ud."Weight", ud."Biceps", ud."Chest", ud."Waist"{experience_filter}
            )
            SELECT 
                t.id,
                t.fullname,
                t.email,
                t.phonenumber,
                t.ismale,
                t.dob,
                t.avatarurl,
                t.bio,
                t.accountstatus,
                t.createdat,
                t.updatedat,
                t.pt_gym_id as gym_id,
                t.experience,
                t.certificates,
                t.height,
                t.weight,
                t.biceps,
                t.chest,
                t.waist,
                t.goal_trainings,
                t.is_freelance,
                NULL::UUID as gym_id_unused,
                'Hu·∫•n luy·ªán vi√™n t·ª± do' as gymname,
                'T·∫≠p t·∫°i ƒë·ªãa ƒëi·ªÉm linh ho·∫°t' as gymaddress,
                NULL::DOUBLE PRECISION as gym_latitude,
                NULL::DOUBLE PRECISION as gym_longitude,
                false as gym_hotresearch,
                'freelance' as pt_type
            FROM TrainersWithGoals t
            WHERE t.is_freelance = true AND t.pt_gym_id IS NULL
            ORDER BY t.experience DESC NULLS LAST, t.fullname ASC
            LIMIT 10
            """
        elif only_gym:
            # Ch·ªâ tr·∫£ v·ªÅ PT gym
            print("üè¢ Ch·ªâ t√¨m PT GYM")
            query = f"""
            WITH FilteredPTs AS (
                SELECT DISTINCT
                    pt."Id" as pt_id
                FROM "AspNetUsers" pt
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                WHERE {where_clause}
            ),
            TrainersWithGoals AS (
                SELECT 
                    pt."Id" as id,
                    pt."FullName" as fullname,
                    pt."Email" as email,
                    pt."PhoneNumber" as phonenumber,
                    pt."IsMale" as ismale,
                    pt."Dob" as dob,
                    pt."AvatarUrl" as avatarurl,
                    pt."Bio" as bio,
                    pt."AccountStatus" as accountstatus,
                    pt."CreatedAt" as createdat,
                    pt."UpdatedAt" as updatedat,
                    pt."GymOwnerId" as pt_gym_id,
                    ud."Experience" as experience,
                    ud."Certificates" as certificates,
                    ud."Height" as height,
                    ud."Weight" as weight,
                    ud."Biceps" as biceps,
                    ud."Chest" as chest,
                    ud."Waist" as waist,
                    ARRAY_AGG(DISTINCT gt."Name") FILTER (WHERE gt."Name" IS NOT NULL) as goal_trainings,
                    CASE 
                        WHEN COUNT(DISTINCT pfp."Id") > 0 THEN true 
                        ELSE false 
                    END as is_freelance
                FROM "AspNetUsers" pt
                INNER JOIN FilteredPTs fp ON pt."Id" = fp.pt_id
                LEFT JOIN "UserDetails" ud ON pt."Id" = ud."Id"
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                LEFT JOIN "PTFreelancePackages" pfp ON pt."Id" = pfp."PtId" AND pfp."IsEnabled" = true
                GROUP BY pt."Id", ud."Experience", ud."Certificates", ud."Height", 
                         ud."Weight", ud."Biceps", ud."Chest", ud."Waist"{experience_filter}
            )
            SELECT 
                t.id,
                t.fullname,
                t.email,
                t.phonenumber,
                t.ismale,
                t.dob,
                t.avatarurl,
                t.bio,
                t.accountstatus,
                t.createdat,
                t.updatedat,
                t.pt_gym_id as gym_id,
                t.experience,
                t.certificates,
                t.height,
                t.weight,
                t.biceps,
                t.chest,
                t.waist,
                t.goal_trainings,
                t.is_freelance,
                gym."Id" as gym_id_unused,
                gym."GymName" as gymname,
                COALESCE(
                    CONCAT_WS(', ', 
                        NULLIF(a."HouseNumber", ''), 
                        NULLIF(a."Street", ''), 
                        NULLIF(a."Ward", ''), 
                        NULLIF(a."District", ''), 
                        NULLIF(a."City", '')
                    ), 
                    'ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t'
                ) as gymaddress,
                CAST(gym."Latitude" AS DOUBLE PRECISION) as gym_latitude,
                CAST(gym."Longitude" AS DOUBLE PRECISION) as gym_longitude,
                gym."hotResearch" as gym_hotresearch,
                'gym' as pt_type
            FROM TrainersWithGoals t
            INNER JOIN "AspNetUsers" gym ON t.pt_gym_id = gym."Id"
            LEFT JOIN "Addresses" a ON gym."Id" = a."CustomerId" AND a."IsEnabled" = true
            WHERE gym."AccountStatus" = 'Active' AND t.pt_gym_id IS NOT NULL
            ORDER BY gym."hotResearch" DESC, t.experience DESC NULLS LAST, t.fullname ASC
            LIMIT 10
            """
        else:
            # Mixed c·∫£ gym v√† freelance (default behavior)
            print("üîÄ T√¨m c·∫£ PT GYM v√† FREELANCE (mixed)")
            query = f"""
            WITH FilteredPTs AS (
                SELECT DISTINCT
                    pt."Id" as pt_id
                FROM "AspNetUsers" pt
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                WHERE {where_clause}
            ),
            TrainersWithGoals AS (
                SELECT 
                    pt."Id" as id,
                    pt."FullName" as fullname,
                    pt."Email" as email,
                    pt."PhoneNumber" as phonenumber,
                    pt."IsMale" as ismale,
                    pt."Dob" as dob,
                    pt."AvatarUrl" as avatarurl,
                    pt."Bio" as bio,
                    pt."AccountStatus" as accountstatus,
                    pt."CreatedAt" as createdat,
                    pt."UpdatedAt" as updatedat,
                    pt."GymOwnerId" as pt_gym_id,
                    ud."Experience" as experience,
                    ud."Certificates" as certificates,
                    ud."Height" as height,
                    ud."Weight" as weight,
                    ud."Biceps" as biceps,
                    ud."Chest" as chest,
                    ud."Waist" as waist,
                    ARRAY_AGG(DISTINCT gt."Name") FILTER (WHERE gt."Name" IS NOT NULL) as goal_trainings,
                    -- Ki·ªÉm tra xem c√≥ package freelance kh√¥ng
                    CASE 
                        WHEN COUNT(DISTINCT pfp."Id") > 0 THEN true 
                        ELSE false 
                    END as is_freelance
                FROM "AspNetUsers" pt
                INNER JOIN FilteredPTs fp ON pt."Id" = fp.pt_id
                LEFT JOIN "UserDetails" ud ON pt."Id" = ud."Id"
                LEFT JOIN "PTGoalTrainings" pgt ON pt."Id" = pgt."ApplicationUsersId"
                LEFT JOIN "GoalTrainings" gt ON pgt."GoalTrainingsId" = gt."Id" AND gt."IsEnabled" = true
                LEFT JOIN "PTFreelancePackages" pfp ON pt."Id" = pfp."PtId" AND pfp."IsEnabled" = true
                GROUP BY pt."Id", ud."Experience", ud."Certificates", ud."Height", 
                         ud."Weight", ud."Biceps", ud."Chest", ud."Waist"{experience_filter}
            ),
            -- PT Gym
            GymPTs AS (
                SELECT 
                    t.*,
                    gym."Id" as gym_id,
                    gym."GymName" as gymname,
                    COALESCE(
                        CONCAT_WS(', ', 
                            NULLIF(a."HouseNumber", ''), 
                            NULLIF(a."Street", ''), 
                            NULLIF(a."Ward", ''), 
                            NULLIF(a."District", ''), 
                            NULLIF(a."City", '')
                        ), 
                        'ƒê·ªãa ch·ªâ ch∆∞a c·∫≠p nh·∫≠t'
                    ) as gymaddress,
                    CAST(gym."Latitude" AS DOUBLE PRECISION) as gym_latitude,
                    CAST(gym."Longitude" AS DOUBLE PRECISION) as gym_longitude,
                    gym."hotResearch" as gym_hotresearch,
                    'gym' as pt_type,
                    ROW_NUMBER() OVER (ORDER BY gym."hotResearch" DESC, t.experience DESC NULLS LAST, t.fullname ASC) as rn
                FROM TrainersWithGoals t
                INNER JOIN "AspNetUsers" gym ON t.pt_gym_id = gym."Id"
                LEFT JOIN "Addresses" a ON gym."Id" = a."CustomerId" AND a."IsEnabled" = true
                WHERE gym."AccountStatus" = 'Active'
            ),
            -- PT Freelance
            FreelancePTs AS (
                SELECT 
                    t.*,
                    NULL::UUID as gym_id,
                    'Hu·∫•n luy·ªán vi√™n t·ª± do' as gymname,
                    'T·∫≠p t·∫°i ƒë·ªãa ƒëi·ªÉm linh ho·∫°t' as gymaddress,
                    NULL::DOUBLE PRECISION as gym_latitude,
                    NULL::DOUBLE PRECISION as gym_longitude,
                    false as gym_hotresearch,
                    'freelance' as pt_type,
                    ROW_NUMBER() OVER (ORDER BY t.experience DESC NULLS LAST, t.fullname ASC) as rn
                FROM TrainersWithGoals t
                WHERE t.is_freelance = true AND t.pt_gym_id IS NULL
            ),
            -- Mixed k·∫øt qu·∫£: xen k·∫Ω gym v√† freelance
            MixedResults AS (
                SELECT * FROM GymPTs WHERE rn <= 10
                UNION ALL
                SELECT * FROM FreelancePTs WHERE rn <= 10
            )
            -- L·∫•y 10 PT, xen k·∫Ω gi·ªØa gym v√† freelance
            SELECT 
                id, fullname, email, phonenumber, ismale, dob, avatarurl, bio,
                accountstatus, createdat, updatedat, pt_gym_id as gym_id, experience, certificates,
                height, weight, biceps, chest, waist, goal_trainings, is_freelance,
                gymname, gymaddress, gym_latitude, gym_longitude, gym_hotresearch,
                pt_type
            FROM (
                SELECT *,
                    ROW_NUMBER() OVER (
                        PARTITION BY (rn % 2)
                        ORDER BY 
                            CASE WHEN pt_type = 'gym' THEN 0 ELSE 1 END,
                            gym_hotresearch DESC,
                            experience DESC NULLS LAST
                    ) as mixed_rn
                FROM MixedResults
            ) mixed
            WHERE mixed_rn <= 5
            ORDER BY 
                (mixed_rn - 1) * 2 + CASE WHEN pt_type = 'gym' THEN 0 ELSE 1 END,
                gym_hotresearch DESC,
                experience DESC NULLS LAST
            LIMIT 10
            """

        return query

    except Exception as e:
        print(f"L·ªói trong build_trainer_search_query: {str(e)}")
        return None


def get_trainer_distance_preference(user_input):
    """Ph√¢n t√≠ch kho·∫£ng c√°ch t√¨m ki·∫øm PT t∆∞∆°ng t·ª± nh∆∞ gym"""
    user_input_lower = user_input.lower()

    # T√¨m s·ªë km c·ª• th·ªÉ
    km_match = re.search(r'(\d+)\s*km', user_input_lower)
    if km_match:
        distance = int(km_match.group(1))
        return max(1, min(distance, 50))

    # Pattern matching
    distance_patterns = {
        2: [r'(r·∫•t g·∫ßn|very close|ƒëi b·ªô)'],
        5: [r'(g·∫ßn|nearby|close)'],
        10: [r'(khu v·ª±c|trong khu|area)'],
        15: [r'(xa h∆°n|farther)'],
        25: [r'(r·∫•t xa|very far)'],
        50: [r'(t·∫•t c·∫£|all|b·∫•t k·ª≥)']
    }

    for distance, patterns in distance_patterns.items():
        for pattern in patterns:
            if re.search(pattern, user_input_lower):
                return distance

    return 10  # Default


def detect_trainer_search_intent(user_input):
    """Ph√°t hi·ªán √Ω ƒë·ªãnh t√¨m ki·∫øm Personal Trainer"""
    user_lower = user_input.lower()

    # T·ª´ kh√≥a ch·ªâ r√µ t√¨m PT
    pt_keywords = [
        r'\bpt\b', r'hu·∫•n luy·ªán vi√™n', r'personal trainer', r'trainer',
        r'hlv', r'coach', r'gi√°o vi√™n th·ªÉ d·ª•c',
        r't√¨m pt', r'find trainer', r't√¨m trainer'
    ]

    # Ki·ªÉm tra c√≥ t·ª´ kh√≥a PT kh√¥ng
    has_pt_keyword = any(re.search(pattern, user_lower) for pattern in pt_keywords)

    # Ng·ªØ c·∫£nh v·ªÅ t·∫≠p luy·ªán c√° nh√¢n
    training_context = [
        r't·∫≠p ri√™ng', r't·∫≠p c√° nh√¢n', r'personal training',
        r'h∆∞·ªõng d·∫´n t·∫≠p', r'ch·ªâ t·∫≠p', r'd·∫°y t·∫≠p',
        r't∆∞ v·∫•n t·∫≠p', r'l√™n l·ªãch t·∫≠p'
    ]

    has_training_context = any(re.search(pattern, user_lower) for pattern in training_context)

    # M·ª•c ti√™u c·ª• th·ªÉ
    has_specific_goal = any(goal in user_lower for goal in [
        'gi·∫£m c√¢n', 'tƒÉng c∆°', 'th·ªÉ h√¨nh', 's·ª©c m·∫°nh', 's·ª©c b·ªÅn',
        'lose weight', 'build muscle', 'bodybuilding', 'strength'
    ])

    return has_pt_keyword or (has_training_context and has_specific_goal)


def classify_trainer_query(user_input, longitude=None, latitude=None):
    """
    Ph√¢n lo·∫°i truy v·∫•n t√¨m ki·∫øm PT v√† t·∫°o SQL
    Returns: (is_trainer_query, sql_query)
    """
    try:
        if not detect_trainer_search_intent(user_input):
            return False, None

        sql_query = build_trainer_search_query(user_input, longitude, latitude)

        if sql_query:
            print(f"‚úÖ TRAINER_SEARCH: Query generated for '{user_input}'")
            return True, sql_query

        return False, None

    except Exception as e:
        print(f"L·ªói trong classify_trainer_query: {str(e)}")
        return False, None
